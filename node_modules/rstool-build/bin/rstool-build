#!/usr/bin/env node

const program = require('commander');

program
  .version(require('../package').version, '-v, --version')
  .option('-o, --output-path <path>', 'output path')
  .option('-w, --watch [delay]', 'watch file changes and rebuild')
  .option('--hash', 'build with hash and output map.json')
  .option('--publicPath <publicPath>', 'publicPath for webpack')
  .option('--devtool <devtool>', 'sourcemap generate method, default is null')
  .option('--config <path>', 'custom config path, default is webpack.config.js')
  //.option('--no-compress', 'build without compress')
  //.option('--json', 'running webpack with --json, ex. result.json')
  //.option('--verbose', 'run with more logging messages.')
  .option('--server', 'run with server.')
  .option('--cdn', 'static cdn.')
  .option('--port <port>', 'server port')
  .option('--customEntry', 'custom entry.')
  .option('--clearCache', 'clear cache, remove node_modules of dirs')
  .option('--useRem', 'user rem instead px(base is 75).')
  .option('--baseDir <baseDir>', 'base dir')
  .option('--packageName <packageName>', 'package name, default package.json name')
  .option('--env <env>', 'one of ["dev", "uat1", "stg", "prd"]')
  .option('--hot <hot>', 'hot update(only on --server on), default true')
  .option('--append', 'append file to dist')
  .parse(process.argv);

program.cwd = process.cwd();

if (program.server || program.watch) {
  require('../lib/build')(program);
} else {
  require('../lib/build')(program, () => {
    process.exit(0);
  });
}
