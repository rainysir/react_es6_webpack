'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = build;

var _path = require('path');

var _fs = require('fs');

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackDevServer = require('webpack-dev-server');

var _webpackDevServer2 = _interopRequireDefault(_webpackDevServer);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _mergeCustomConfig = require('./mergeCustomConfig');

var _mergeCustomConfig2 = _interopRequireDefault(_mergeCustomConfig);

var _getWebpackCommonConfig = require('./getWebpackCommonConfig');

var _getWebpackCommonConfig2 = _interopRequireDefault(_getWebpackCommonConfig);

var _htmlWebpackPlugin = require('html-webpack-plugin');

var _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var config = require('./config.js');
var glob = require('glob');
var fs = require('fs');
var del = require('del');

var path = require('path');
var CopyWebpackPlugin = require('copy-webpack-plugin');

function getWebpackConfig(args) {
  var webpackConfig = (0, _getWebpackCommonConfig2.default)(args);

  webpackConfig.plugins = webpackConfig.plugins || [];

  // Config outputPath.
  if (args.outputPath) {
    webpackConfig.output.path = args.outputPath;
  }
  // 清除dist目录
  if (!args.append) {
    del(webpackConfig.output.path);
  }

  if (args.publicPath) {
    webpackConfig.output.publicPath = args.publicPath;
  }

  if (args.cdn) {
    webpackConfig.output.publicPath = config.dummy_domain;
  }

  if (args.env) {
    webpackConfig.env = args.env;
  }

  if (args.clearCache) {
    // 清除node_modules目录
    del((0, _path.join)(args.cwd, 'node_modules'));
  }

  // Config if no --no-compress.
  if (args.compress) {
    webpackConfig.UglifyJsPluginConfig = {
      output: {
        ascii_only: true
      },
      compress: {
        warnings: false
      }
    };
    webpackConfig.plugins = [].concat(_toConsumableArray(webpackConfig.plugins), [new _webpack2.default.optimize.UglifyJsPlugin(webpackConfig.UglifyJsPluginConfig), new _webpack2.default.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'production')
    })]);
  } else {
    if (process.env.NODE_ENV) {
      webpackConfig.plugins = [].concat(_toConsumableArray(webpackConfig.plugins), [new _webpack2.default.DefinePlugin({
        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)
      })]);
    }
  }

  webpackConfig.plugins = [].concat(_toConsumableArray(webpackConfig.plugins), [new _webpack2.default.optimize.DedupePlugin(), new _webpack2.default.NoErrorsPlugin()]);
  // Output map.json if hash.
  var pkg = require((0, _path.join)(args.cwd, 'package.json'));
  var dllRoot = path.join(__dirname, '..', 'dll');
  var manifestDir = path.join(dllRoot, 'manifest');
  var jsonFiles = fs.readdirSync(manifestDir);
  var dllPlugins = [];
  jsonFiles.forEach(function (fileName) {
    var fullName = path.join(manifestDir, fileName);
    if (pkg.dependencies) {
      // antd
      if (pkg.dependencies.hasOwnProperty('antd') && /antd_\d+_\d+_\d+\.json/.test(fileName)) {
        dllPlugins.push({
          context: args.cwd,
          manifest: require(fullName)
        });
      }
    }
  });
  if (args.hash) {
    webpackConfig.output.filename = webpackConfig.output.chunkFilename = '[name]-[chunkhash:6].js';
    // webpackConfig.plugins = [...webpackConfig.plugins,
    //  require('map-json-webpack-plugin')({
    //    assetsPath: pkg.name,
    //    cache,
    //  }),
    // ];
  }

  if (typeof args.config === 'function') {
    webpackConfig = args.config(webpackConfig) || webpackConfig;
  } else {
    webpackConfig = (0, _mergeCustomConfig2.default)(webpackConfig, (0, _path.resolve)(args.cwd, args.config || 'webpack.config.js'));
  }

  if (dllPlugins.length > 0) {
    webpackConfig.plugins.push(new (Function.prototype.bind.apply(_webpack2.default.DllReferencePlugin, [null].concat(dllPlugins)))());
    var libRoot = path.join(dllRoot, 'libs');
    webpackConfig.plugins.push(new CopyWebpackPlugin([{
      from: libRoot
    }]));
  }
  // let domain = '.rs.com';
  var env = args.env || 'dev';
  var fullDomain = '';
  var aureumaDomain = '';
  if (env) {
    var environment = config.environment[env];
    var cdn = config.cdnMapping.others.cdn;
    if (environment) {
      fullDomain = cdn + '.' + environment.domain;
      aureumaDomain = environment.aureuma_domain;
    }
  }

  if (!args.customEntry && webpackConfig.entry) {
    if (!Array.isArray(webpackConfig.entry)) {
      Object.keys(webpackConfig.entry).forEach(function (key) {
        var pluginConfig = {};
        var modulePath = (0, _path.join)(webpackConfig.baseDir, 'src', 'modules', key);
        var configFile = (0, _path.join)(modulePath, 'config.json');
        if (fs.existsSync(configFile)) {
          var perConfig = require(configFile);
          pluginConfig.title = perConfig.html.title;
        }
        var faviconFile = (0, _path.join)(webpackConfig.baseDir, 'src', 'imgs', 'favicon.png');
        if (fs.existsSync(faviconFile)) {
          pluginConfig.favicon = faviconFile;
        }

        var template = (0, _path.join)(modulePath, 'index.html');
        if (fs.existsSync(template)) {
          pluginConfig.template = template;
        } else {
          template = (0, _path.join)(webpackConfig.baseDir, 'src', 'template.html');
          if (fs.existsSync(template)) {
            pluginConfig.template = template;
          }
        }
        if (fullDomain) {
          pluginConfig.domain = fullDomain;
          pluginConfig.libs_domain = fullDomain + '/' + pkg.name;
        }
        if (aureumaDomain) {
          pluginConfig.aureuma_domain = aureumaDomain;
        }

        // 每个页面生成一个html
        var plugin = new _htmlWebpackPlugin2.default(_extends({}, pluginConfig, {
          // 生成出来的html文件名
          filename: key + '.html',
          // favicon: favicon,
          // 每个html的模版，这里多个页面使用同一个模版
          // template: path.join(args.cwd, 'src', 'template.html'),
          // 自动将引用插入html
          inject: 'body',
          // title: title,
          // 每个html引用的js模块，也可以在这里加上vendor等公用模块
          chunks: ['common', key]
        }));
        webpackConfig.plugins.push(plugin);
      });
    }
  }
  return webpackConfig;
}

function build(args, callback) {
  // Get config.
  var webpackConfig = getWebpackConfig(args, {});
  webpackConfig = Array.isArray(webpackConfig) ? webpackConfig : [webpackConfig];
  //
  //
  var fileOutputPath = void 0;
  webpackConfig.forEach(function (preWebpackConfig) {
    fileOutputPath = preWebpackConfig.output.path;
  });
  var devServer = {};
  var cdnMap = {};
  var envDomain = 'dev';
  var projectName = '';
  var dummyDomain = config.dummy_domain;
  if (dummyDomain && /\/$/.test(dummyDomain)) {
    dummyDomain = dummyDomain.replace(/\/$/, '');
  }
  webpackConfig.forEach(function (perWebpackConfig) {
    if (perWebpackConfig.devServer) {
      devServer = perWebpackConfig.devServer;
    }
    if (perWebpackConfig.cdnMapping) {
      cdnMap = perWebpackConfig.cdnMapping;
    }
    if (args.env && perWebpackConfig.environment) {
      var env = perWebpackConfig.environment[args.env] || {};
      envDomain = env.domain || perWebpackConfig.environment.dev.domain;
    }
    if (perWebpackConfig.projectName) {
      projectName = perWebpackConfig.projectName;
    }
  });

  // if (args.watch) {
  webpackConfig.forEach(function (perWebpackConfig) {
    perWebpackConfig.plugins.push(new _webpack.ProgressPlugin(function (percentage, msg) {
      var stream = process.stderr;
      if (stream.isTTY && percentage < 0.71) {
        stream.cursorTo(0);
        stream.write('\uD83D\uDCE6  ' + _chalk2.default.magenta(msg));
        stream.clearLine(1);
      } else if (percentage === 1) {
        console.log(_chalk2.default.green('\nwebpack: bundle build is now finished.'));
      }
    }));
  });
  // }

  function doneHandler(err, stats) {
    if (args.cdn) {
      var files = glob.sync((0, _path.join)(fileOutputPath, '**/*.{html,js,css,map}'));
      var cdnMapping = cdnMap;
      var strRegex = dummyDomain + '/([^"|^)]+)';

      var regex = new RegExp(strRegex, 'g');
      files.forEach(function (file) {
        var fileContent = (0, _fs.readFileSync)(file, 'utf-8');
        fileContent = fileContent.replace(regex, function (search) {
          var retVal = search;
          Object.keys(cdnMapping).forEach(function (cdnKey) {
            var entry = cdnMapping[cdnKey];
            var tmpRegex = new RegExp(strRegex + '.' + entry.name, 'g');
            var domain = '//' + entry.cdn + '.' + envDomain;
            if (tmpRegex.test(search)) {
              retVal = search.replace(tmpRegex, domain + '/' + projectName + '/$1.' + entry.name);
              return;
            }
          });
          return retVal;
        });
        fileContent = fileContent.replace(dummyDomain, '//' + cdnMapping.image.cdn + '.' + envDomain + '/' + projectName);
        (0, _fs.writeFileSync)(file, fileContent, 'utf-8');
      });
    }
    if (args.json) {
      var filename = typeof args.json === 'boolean' ? 'build-bundle.json' : args.json;
      var jsonPath = (0, _path.join)(fileOutputPath, filename);
      (0, _fs.writeFileSync)(jsonPath, JSON.stringify(stats.toJson()), 'utf-8');
      console.log('Generate Json File: ' + jsonPath);
    }

    var _stats$toJson = stats.toJson(),
        errors = _stats$toJson.errors;

    if (errors && errors.length) {
      process.on('exit', function () {
        process.exit(1);
      });
    }
    // if watch enabled only stats.hasErrors would log info
    // otherwise  would always log info
    if (!args.watch || stats.hasErrors()) {
      var buildInfo = stats.toString({
        colors: true,
        children: true,
        chunks: !!args.verbose,
        modules: !!args.verbose,
        chunkModules: !!args.verbose,
        hash: !!args.verbose,
        version: !!args.verbose
      });
      if (stats.hasErrors()) {
        console.error(buildInfo);
      } else {
        console.log(buildInfo);
      }
    }

    if (err) {
      process.on('exit', function () {
        process.exit(1);
      });
      console.error(err);
    }

    if (callback) {
      callback(err);
    }
  }

  // 服务器启动时自动添加source-map
  if (args.server) {
    webpackConfig.devtool = 'source-map';
  }
  // Run compiler.
  var compiler = (0, _webpack2.default)(webpackConfig);

  // Hack: remove extract-text-webpack-plugin log
  if (!args.verbose) {
    compiler.plugin('done', function (stats) {
      stats.stats.forEach(function (stat) {
        stat.compilation.children = stat.compilation.children.filter(function (child) {
          // eslint-disable-line
          return child.name !== 'extract-text-webpack-plugin';
        });
      });
    });
  }

  if (args.watch) {
    compiler.watch(args.watch || 200, doneHandler);
  }
  if (args.server) {
    var webpackDevServer = new _webpackDevServer2.default(compiler, devServer);
    webpackDevServer.listen(args.port || 9000);
  } else {
    compiler.run(doneHandler);
  }
}
module.exports = exports['default'];