'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = getWebpackCommonConfig;

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _extractTextWebpackPlugin = require('extract-text-webpack-plugin');

var _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);

var _caseSensitivePathsWebpackPlugin = require('case-sensitive-paths-webpack-plugin');

var _caseSensitivePathsWebpackPlugin2 = _interopRequireDefault(_caseSensitivePathsWebpackPlugin);

var _getBabelCommonConfig = require('./getBabelCommonConfig');

var _getBabelCommonConfig2 = _interopRequireDefault(_getBabelCommonConfig);

var _getTSCommonConfig = require('./getTSCommonConfig');

var _getTSCommonConfig2 = _interopRequireDefault(_getTSCommonConfig);

var _fs = require('fs');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rucksackCss = require('rucksack-css');

var _rucksackCss2 = _interopRequireDefault(_rucksackCss);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _postcssPxtorem = require('postcss-pxtorem');

var _postcssPxtorem2 = _interopRequireDefault(_postcssPxtorem);

var _precss = require('precss');

var _precss2 = _interopRequireDefault(_precss);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// 获取指定路径下的入口文件
function getEntries(globPath, exclude) {
  var files = _glob2.default.sync(globPath);
  var entries = {};
  files.forEach(function (filepath) {
    if (exclude && exclude.test(filepath)) {
      return;
    }
    // 取倒数第二层(view下面的文件夹)做包名
    var split = filepath.split('/');
    var name = split[split.length - 2];
    entries[name] = filepath;
  });

  return entries;
}

/* eslint quotes:0 */

function getWebpackCommonConfig(args) {
  var configPath = './config.js';
  var pkgPath = (0, _path.join)(args.cwd, 'package.json');
  var pkg = (0, _fs.existsSync)(pkgPath) ? require(pkgPath) : {};
  var config = require(configPath);
  var env = args.env;
  var port = args.port || 9000;
  var hot = args.hot || true;
  var jsFileName = args.hash ? '[name]-[chunkhash:6].js' : '[name].js';
  var cssFileName = args.hash ? '[name]-[chunkhash:6].css' : '[name].css';
  var commonName = args.hash ? 'common-[hash:6].js' : 'common.js';

  var baseDir = args.cwd;
  if (args.baseDir) {
    baseDir = (0, _path.join)(args.cwd, args.baseDir);
  }

  var babelQuery = (0, _getBabelCommonConfig2.default)();
  var tsQuery = (0, _getTSCommonConfig2.default)();
  tsQuery.declaration = false;

  var theme = {};
  if (pkg.theme && typeof pkg.theme === 'string') {
    var cfgPath = pkg.theme;
    // relative path
    if (cfgPath.charAt(0) === '.') {
      cfgPath = (0, _path.resolve)(args.cwd, cfgPath);
    }
    var getThemeConfig = require(cfgPath);
    theme = getThemeConfig();
  } else if (pkg.theme && _typeof(pkg.theme) === 'object') {
    theme = pkg.theme;
  }

  var emptyBuildins = ['child_process', 'cluster', 'dgram', 'dns', 'fs', 'module', 'net', 'readline', 'repl', 'tls'];

  var browser = pkg.browser || {};
  var projectName = args.packageName || pkg.name || '';
  var node = emptyBuildins.reduce(function (obj, name) {
    if (!(name in browser)) {
      return _extends({}, obj, _defineProperty({}, name, 'empty'));
    }
    return obj;
  }, {});

  var revVal = _extends({}, config, {
    baseDir: baseDir,
    babel: babelQuery,
    projectName: projectName,
    ts: {
      transpileOnly: true,
      compilerOptions: tsQuery
    },
    output: {
      path: (0, _path.join)(process.cwd(), './dist/'),
      filename: jsFileName,
      chunkFilename: jsFileName
    },

    devtool: args.devtool,

    resolve: {
      modulesDirectories: ['node_modules', (0, _path.join)(__dirname, '../node_modules')],
      extensions: ['', '.web.tsx', '.web.ts', '.web.jsx', '.web.js', '.ts', '.tsx', '.js', '.jsx', '.json']
    },

    resolveLoader: {
      modulesDirectories: ['node_modules', (0, _path.join)(__dirname, '../node_modules')],
      alias: {
        "react-proxy": _path2.default.join(__dirname, "..")
      }
    },
    entry: pkg.entry,

    node: node,
    devServer: {
      hot: true,
      inline: true,
      port: port,
      stats: { colors: true, progress: false },
      compress: true,
      quiet: false,
      clientLogLevel: 'info',
      open: false,
      proxy: {
        '/api': {
          changeOrigin: true,
          target: 'http://localhost:3000',
          secure: false
        }
      }
    },
    module: {
      noParse: [/moment.js/],
      loaders: [{
        //test: /\.js$/,
        test: function test(filePath) {
          var matchFlg = false;
          if (/rs\-.+\.js$/.test(filePath)) {
            matchFlg = true;
          } else if (/\.js$/.test(filePath) && !/node_modules/.test(filePath)) {
            matchFlg = true;
          }
          return matchFlg;
        },

        //exclude: /node_modules/,
        loader: require.resolve('babel-loader'),
        query: babelQuery
      }, {
        test: /\.jsx$/,
        loader: require.resolve('babel-loader'),
        query: babelQuery
      }, {
        test: /\.tsx?$/,
        loaders: [require.resolve('babel-loader'), require.resolve('ts-loader')]
      }, {
        test: function test(filePath) {
          return (/\.rspl$/.test(filePath) && !/\.module\.rspl$/.test(filePath)
          );
        },

        loader: "string"
      }, {
        test: function test(filePath) {
          return (/\.tpl$/.test(filePath) && !/\.module\.tpl$/.test(filePath)
          );
        },

        loader: "string"
      }, {
        test: function test(filePath) {
          return (/\.css$/.test(filePath) && !/\.module\.css$/.test(filePath)
          );
        },

        loader: _extractTextWebpackPlugin2.default.extract('' + require.resolve('css-loader') + ('?sourceMap&-restructuring&-autoprefixer!' + require.resolve('postcss-loader')))
      }, {
        test: /\.module\.css$/,
        loader: _extractTextWebpackPlugin2.default.extract('' + require.resolve('css-loader') + '?sourceMap&-restructuring&modules&localIdentName=[local]___[hash:base64:5]&-autoprefixer!' + ('' + require.resolve('postcss-loader')))
      }, {
        test: function test(filePath) {
          return (/\.less$/.test(filePath) && !/\.module\.less$/.test(filePath)
          );
        },

        loader: _extractTextWebpackPlugin2.default.extract(require.resolve('css-loader') + '?sourceMap&-autoprefixer!' + (require.resolve('postcss-loader') + '!') + (require.resolve('less-loader') + '?{"sourceMap":true,"modifyVars":' + JSON.stringify(theme) + '}'))
      }, {
        test: /\.module\.less$/,
        loader: _extractTextWebpackPlugin2.default.extract(require.resolve('css-loader') + '?' + 'sourceMap&modules&localIdentName=[local]___[hash:base64:5]&-autoprefixer!' + (require.resolve('postcss-loader') + '!') + (require.resolve('less-loader') + '?') + ('{"sourceMap":true,"modifyVars":' + JSON.stringify(theme) + '}'))
      }, {
        test: function test(filePath) {
          return (/\.scss$/.test(filePath) && !/\.module\.scss$/.test(filePath)
          );
        },

        exclude: /node_modules/,
        loader: _extractTextWebpackPlugin2.default.extract(require.resolve('css-loader') + '?sourceMap&-autoprefixer!' + (require.resolve('postcss-loader') + '!') + (require.resolve('sass-loader') + '?{"sourceMap":true,"modifyVars":' + JSON.stringify(theme) + '}'))
      }, {
        test: /\.woff(\?v=\d+\.\d+\.\d+)?$/,
        loader: require.resolve('url-loader') + '?' + 'limit=10000&minetype=application/font-woff'
      }, {
        test: /\.woff2(\?v=\d+\.\d+\.\d+)?$/,
        loader: require.resolve('url-loader') + '?' + 'limit=10000&minetype=application/font-woff'
      }, {
        test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/,
        loader: require.resolve('url-loader') + '?' + 'limit=10000&minetype=application/octet-stream'
      }, { test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, loader: '' + require.resolve('file-loader') },
      // 与antd-mobile的svg处理方案冲突
      //{
      //  test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
      //  loader: `${require.resolve('url-loader')}?` +
      //  `limit=10000&minetype=image/svg+xml`,
      //},
      {
        test: /\.(png|jpg|jpeg|gif)(\?v=\d+\.\d+\.\d+)?$/i,
        loader: require.resolve('url-loader') + '?limit=10000&name=images/[name].[hash:6].[ext]'
      }, { test: /\.json$/, loader: '' + require.resolve('json-loader') }]
    },

    postcss: [(0, _rucksackCss2.default)(), (0, _autoprefixer2.default)({
      browsers: ['last 2 versions', 'Firefox ESR', '> 1%', 'ie >= 8', 'iOS >= 8', 'Android >= 4']
    })],
    favicon: '',
    plugins: [new _webpack2.default.optimize.CommonsChunkPlugin('common', commonName), new _extractTextWebpackPlugin2.default(cssFileName, {
      disable: false,
      allChunks: true
    }), new _webpack2.default.optimize.OccurenceOrderPlugin(), new _caseSensitivePathsWebpackPlugin2.default()]
  });
  // 生产,stg环境
  if (env === 'prd' || env === 'stg') {
    // 加入生产环境定义
    revVal.plugins = [new _webpack2.default.DefinePlugin({
      "process.env": {
        NODE_ENV: JSON.stringify("production")
      }
    })].concat(revVal.plugins);
  } else {
    // 加入调试模块
    // 加入开发环境定义
    revVal.plugins = [new _webpack2.default.HotModuleReplacementPlugin(), new _webpack2.default.DefinePlugin({
      "process.env": {
        NODE_ENV: JSON.stringify("development")
      }
    })].concat(revVal.plugins);
  }
  if (args.useRem) {
    revVal.postcss.push((0, _postcssPxtorem2.default)({ rootValue: 75, propList: ['*'], minPixelValue: 2 }));
    revVal.postcss.push(_precss2.default);
  }
  if (!args.customEntry) {
    var entries = getEntries((0, _path.join)(baseDir, 'src/modules/*/index.js'), /common/);
    revVal.entry = {};
    Object.keys(entries).forEach(function (name) {
      // 每个页面生成一个entry，如果需要HotUpdate，在这里修改entry
      if (args.server && hot) {
        revVal.entry[name] = ['webpack-dev-server/client?http://localhost:' + port + '/', 'webpack/hot/dev-server', 'babel-polyfill', entries[name]];
      } else {
        revVal.entry[name] = ['babel-polyfill', entries[name]];
      }
    });
  }
  revVal.baseDir = revVal.baseDir || args.cwd;
  return revVal;
}
module.exports = exports['default'];